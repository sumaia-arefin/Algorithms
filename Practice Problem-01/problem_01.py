# -*- coding: utf-8 -*-
"""Problem-01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1toUcgW7VfgIp-iKBzT25ukuocY75UmAM
"""

file= open("Problem_01_for_Lab-01_input.txt",'r')
file_read= file.read()
given= file_read.split("\n")

odd_parity= 0
even_parity= 0
no_parity = 0
palindrome = 0
not_palinddrome = 0

def palin(text):
    global palindrome,not_palinddrome
    if text=="":
        not_palinddrome+= 1
        return "Not a palindrome"
    else:
        lenght= len(text)
        i = 0
        while (i<=lenght//2): 
            if (i==lenght//2):
                palindrome += 1
                return "A palindrome"
            if text[i]!=text[lenght-1-i]:
                not_palinddrome += 1
                return "Not a palindrome"
            i+=1
            
def parity_checker(num):
    global no_parity,even_parity,odd_parity
    if "." in num:
        no_parity += 1
        return "Cannot have"
    else:
        if int(num)%2 ==0:
            even_parity += 1
            return "Even num"
        else:
            odd_parity += 1
            return "Odd num"
here = open("Problem_01_for_Lab-01_output.txt","w")
for i in range(len(given)):
    a=given[i]
    b= a.split(" ")
    value=palin(b[1])
    var=parity_checker(b[0])
    here.write(f"{b[0]} has {var} parity and {b[1]} is {value}\n")
here.close()
record_file= open("Problem_01_for_Lab-01_record.txt", "w")
record_file.write(f"Percantage of odd parity: {round((100*odd_parity)/(odd_parity+even_parity+no_parity))}%\n")
record_file.write(f"Percantage of even parity: {round((100*even_parity)/(odd_parity+even_parity+no_parity))}%\n")
record_file.write(f"Percantage of no parity: {round((100*no_parity)/(odd_parity+even_parity+no_parity))}%\n")
record_file.write(f"Percantage of palindrome: {round((100*palindrome)/(palindrome+not_palinddrome))}%\n")
record_file.write(f"Percantage of non-palindrome: {round((100*not_palinddrome)/(palindrome+not_palinddrome))}%")
record_file.close()